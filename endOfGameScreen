/**
	* NOTE THAT THIS CODE IS IDE GENERATED DO NOT TOUCH THIS IT WILL BREAK
	*/
package avoidancegame;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author rohan
 */
public class EndGame extends javax.swing.JFrame {

	/**
	 * Creates new form EndGame
	 */
	public EndGame() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
 // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
 private void initComponents() {

  playAgain = new java.awt.Button();
  endGame = new java.awt.Button();
  jScrollPane1 = new javax.swing.JScrollPane();
  jTextArea1 = new javax.swing.JTextArea();

  setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

  playAgain.setLabel("Play Again!");
  playAgain.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    playAgainActionPerformed(evt);
   }
  });

  endGame.setLabel("Give Up!");
  endGame.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    endGameActionPerformed(evt);
   }
  });

  jTextArea1.setEditable(false);
  jTextArea1.setColumns(20);
  jTextArea1.setRows(5);
  jTextArea1.setText("Good Game your score is"+" "+GameFrame.score+"!"+doHighscoreStuff()+"\nPlay again?");
  jScrollPane1.setViewportView(jTextArea1);

  javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
  getContentPane().setLayout(layout);
  layout.setHorizontalGroup(
   layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
   .addGroup(layout.createSequentialGroup()
    .addGap(50, 50, 50)
    .addComponent(playAgain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
    .addComponent(endGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addGap(52, 52, 52))
   .addGroup(layout.createSequentialGroup()
    .addGap(19, 19, 19)
    .addComponent(jScrollPane1)
    .addContainerGap())
  );
  layout.setVerticalGroup(
   layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
   .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
    .addGap(22, 22, 22)
    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addComponent(endGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
     .addComponent(playAgain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    .addContainerGap())
  );

  pack();
 }// </editor-fold>                        
/**
	* Ends the game
	* @param evt 
	*/
 private void endGameActionPerformed(java.awt.event.ActionEvent evt) {                                        
System.exit(1);
 }                                       
/**
	* plays the game again
	* @param evt 
	*/
 private void playAgainActionPerformed(java.awt.event.ActionEvent evt) {                                          
GameFrame.stillGoing=true;
GameFrame.signal=true;
 }                                         

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(EndGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(EndGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(EndGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(EndGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>
			/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new EndGame().setVisible(true);
			}
		});
	}
	/**
		* Writes int stuff to the file fileName
		* @param fileName the file's name to write to
		* @param stuff the int
		*/
		public static void writeIntToFile(String fileName, int stuff) {

		BufferedWriter output = null;
		try {
			File aFile = new File(fileName);
			FileWriter myWriter = new FileWriter(aFile);
			output = new BufferedWriter(myWriter);
			output.write(stuff + "");
			output.newLine();//This is needed to get to the next line
			output.close();//file must be closed when you are done
		} catch (Exception e) {

		}
	}
/**
	* Adds the high score message
	* @return the high score message
	*/
		public static String doHighscoreStuff(){
	boolean newHigh=false;
	int pastHighScore=00000;
	try{
		pastHighScore=file.getIntFromFile("highScore.txt");
	if(pastHighScore<GameFrame.score){
		newHigh=true;
		writeIntToFile("highScore.txt",GameFrame.score);
				file.writeToFile("person.txt",GameFrame.userName);
	pastHighScore=GameFrame.score;
	}
	}catch(Exception e){
		System.out.println(e);
	newHigh=true;
		writeIntToFile("highScore.txt",GameFrame.score);
		file.writeToFile("person.txt",GameFrame.userName);
	newHigh=true;
		pastHighScore=GameFrame.score;
	}
		String returnMe="";
		if(newHigh) returnMe+="\nNew High Score!";
		returnMe+="\nThe High Score is\n"+file.getStringFromFile("person.txt")+
										".................."+pastHighScore+"";
	return returnMe;
}
public static String getStringFromPopUp(String prompt){
getString userInput=new getString();
userInput.main(null);
		String stringFromPopUp = userInput.getStringFromPopUp(prompt);
return stringFromPopUp;
}
 // Variables declaration - do not modify                     
 private java.awt.Button endGame;
 private javax.swing.JScrollPane jScrollPane1;
 private javax.swing.JTextArea jTextArea1;
 private java.awt.Button playAgain;
 // End of variables declaration                   


}
